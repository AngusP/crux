// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(sharedFFI)
import sharedFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_shared_18f3_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_shared_18f3_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a libray of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// A helper class to read values out of a byte buffer.
fileprivate class Reader {
    let data: Data
    var offset: Data.Index

    init(data: Data) {
        self.data = data
        self.offset = 0
    }

    // Reads an integer at the current offset, in big-endian order, and advances
    // the offset on success. Throws if reading the integer would move the
    // offset past the end of the buffer.
    func readInt<T: FixedWidthInteger>() throws -> T {
        let range = offset..<offset + MemoryLayout<T>.size
        guard data.count >= range.upperBound else {
            throw UniffiInternalError.bufferOverflow
        }
        if T.self == UInt8.self {
            let value = data[offset]
            offset += 1
            return value as! T
        }
        var value: T = 0
        let _ = withUnsafeMutableBytes(of: &value, { data.copyBytes(to: $0, from: range)})
        offset = range.upperBound
        return value.bigEndian
    }

    // Reads an arbitrary number of bytes, to be used to read
    // raw bytes, this is useful when lifting strings
    func readBytes(count: Int) throws -> Array<UInt8> {
        let range = offset..<(offset+count)
        guard data.count >= range.upperBound else {
            throw UniffiInternalError.bufferOverflow
        }
        var value = [UInt8](repeating: 0, count: count)
        value.withUnsafeMutableBufferPointer({ buffer in
            data.copyBytes(to: buffer, from: range)
        })
        offset = range.upperBound
        return value
    }

    // Reads a float at the current offset.
    @inlinable
    func readFloat() throws -> Float {
        return Float(bitPattern: try readInt())
    }

    // Reads a float at the current offset.
    @inlinable
    func readDouble() throws -> Double {
        return Double(bitPattern: try readInt())
    }

    // Indicates if the offset has reached the end of the buffer.
    @inlinable
    func hasRemaining() -> Bool {
        return offset < data.count
    }
}

// A helper class to write values into a byte buffer.
fileprivate class Writer {
    var bytes: [UInt8]
    var offset: Array<UInt8>.Index

    init() {
        self.bytes = []
        self.offset = 0
    }

    func writeBytes<S>(_ byteArr: S) where S: Sequence, S.Element == UInt8 {
        bytes.append(contentsOf: byteArr)
    }

    // Writes an integer in big-endian order.
    //
    // Warning: make sure what you are trying to write
    // is in the correct type!
    func writeInt<T: FixedWidthInteger>(_ value: T) {
        var value = value.bigEndian
        withUnsafeBytes(of: &value) { bytes.append(contentsOf: $0) }
    }

    @inlinable
    func writeFloat(_ value: Float) {
        writeInt(value.bitPattern)
    }

    @inlinable
    func writeDouble(_ value: Double) {
        writeInt(value.bitPattern)
    }
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: Reader) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: Writer)
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
    static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    static func lift(_ buf: RustBuffer) throws -> SwiftType {
        let reader = Reader(data: Data(rustBuffer: buf))
        let value = try read(from: reader)
        if reader.hasRemaining() {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    static func lower(_ value: SwiftType) -> RustBuffer {
          let writer = Writer()
          write(value, into: writer)
          return RustBuffer(bytes: writer.bytes)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_PANIC: Int8 = 2

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: {
        $0.deallocate()
        return UniffiInternalError.unexpectedRustCallError
    })
}

private func rustCallWithError<T, F: FfiConverter>
    (_ errorFfiConverter: F.Type, _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T
    where F.SwiftType: Error, F.FfiType == RustBuffer
    {
    try makeRustCall(callback, errorHandler: { return try errorFfiConverter.lift($0) })
}

private func makeRustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T, errorHandler: (RustBuffer) throws -> Error) throws -> T {
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    switch callStatus.code {
        case CALL_SUCCESS:
            return returnedVal

        case CALL_ERROR:
            throw try errorHandler(callStatus.errorBuf)

        case CALL_PANIC:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

// Public interface members begin here.


fileprivate struct FfiConverterUInt8: FfiConverterPrimitive {
    typealias FfiType = UInt8
    typealias SwiftType = UInt8

    static func read(from buf: Reader) throws -> UInt8 {
        return try lift(buf.readInt())
    }

    static func write(_ value: UInt8, into buf: Writer) {
        buf.writeInt(lower(value))
    }
}

fileprivate struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    static func read(from buf: Reader) throws -> UInt32 {
        return try lift(buf.readInt())
    }

    static func write(_ value: SwiftType, into buf: Writer) {
        buf.writeInt(lower(value))
    }
}

fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    static func read(from buf: Reader) throws -> Bool {
        return try lift(buf.readInt())
    }

    static func write(_ value: Bool, into buf: Writer) {
        buf.writeInt(lower(value))
    }
}

fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    static func read(from buf: Reader) throws -> String {
        let len: Int32 = try buf.readInt()
        return String(bytes: try buf.readBytes(count: Int(len)), encoding: String.Encoding.utf8)!
    }

    static func write(_ value: String, into buf: Writer) {
        let len = Int32(value.utf8.count)
        buf.writeInt(len)
        buf.writeBytes(value.utf8)
    }
}


public protocol CoreProtocol {
    func `message`(_ `msg`: Msg)  -> [Request]
    func `response`(_ `res`: Response)  -> [Request]
    func `view`()  -> ViewModel
    
}

public class Core: CoreProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }
    public convenience init()  {
        self.init(unsafeFromRawPointer: try!
    
    rustCall() {
    
    shared_18f3_Core_new($0)
})
    }

    deinit {
        try! rustCall { ffi_shared_18f3_Core_object_free(pointer, $0) }
    }

    

    
    public func `message`(_ `msg`: Msg)  -> [Request] {
        return try! FfiConverterSequenceTypeRequest.lift(
            try!
    rustCall() {
    
    shared_18f3_Core_message(self.pointer, 
        FfiConverterTypeMsg.lower(`msg`), $0
    )
}
        )
    }
    public func `response`(_ `res`: Response)  -> [Request] {
        return try! FfiConverterSequenceTypeRequest.lift(
            try!
    rustCall() {
    
    shared_18f3_Core_response(self.pointer, 
        FfiConverterTypeResponse.lower(`res`), $0
    )
}
        )
    }
    public func `view`()  -> ViewModel {
        return try! FfiConverterTypeViewModel.lift(
            try!
    rustCall() {
    
    shared_18f3_Core_view(self.pointer, $0
    )
}
        )
    }
    
}


fileprivate struct FfiConverterTypeCore: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Core

    static func read(from buf: Reader) throws -> Core {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: Core, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Core {
        return Core(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: Core) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}


public struct CatImage {
    public var `file`: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`file`: String) {
        self.`file` = `file`
    }
}


extension CatImage: Equatable, Hashable {
    public static func ==(lhs: CatImage, rhs: CatImage) -> Bool {
        if lhs.`file` != rhs.`file` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`file`)
    }
}


fileprivate struct FfiConverterTypeCatImage: FfiConverterRustBuffer {
    fileprivate static func read(from buf: Reader) throws -> CatImage {
        return try CatImage(
            `file`: FfiConverterString.read(from: buf)
        )
    }

    fileprivate static func write(_ value: CatImage, into buf: Writer) {
        FfiConverterString.write(value.`file`, into: buf)
    }
}


public struct ViewModel {
    public var `fact`: String
    public var `image`: CatImage?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`fact`: String, `image`: CatImage?) {
        self.`fact` = `fact`
        self.`image` = `image`
    }
}


extension ViewModel: Equatable, Hashable {
    public static func ==(lhs: ViewModel, rhs: ViewModel) -> Bool {
        if lhs.`fact` != rhs.`fact` {
            return false
        }
        if lhs.`image` != rhs.`image` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`fact`)
        hasher.combine(`image`)
    }
}


fileprivate struct FfiConverterTypeViewModel: FfiConverterRustBuffer {
    fileprivate static func read(from buf: Reader) throws -> ViewModel {
        return try ViewModel(
            `fact`: FfiConverterString.read(from: buf), 
            `image`: FfiConverterOptionTypeCatImage.read(from: buf)
        )
    }

    fileprivate static func write(_ value: ViewModel, into buf: Writer) {
        FfiConverterString.write(value.`fact`, into: buf)
        FfiConverterOptionTypeCatImage.write(value.`image`, into: buf)
    }
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum Msg {
    
    case `none`
    case `clear`
    case `get`
    case `fetch`
    case `restore`
    case `setState`(`bytes`: [UInt8]?)
    case `setFact`(`bytes`: [UInt8])
    case `setImage`(`bytes`: [UInt8])
    case `currentTime`(`isoTime`: String)
}

fileprivate struct FfiConverterTypeMsg: FfiConverterRustBuffer {
    typealias SwiftType = Msg

    static func read(from buf: Reader) throws -> Msg {
        let variant: Int32 = try buf.readInt()
        switch variant {
        
        case 1: return .`none`
        
        case 2: return .`clear`
        
        case 3: return .`get`
        
        case 4: return .`fetch`
        
        case 5: return .`restore`
        
        case 6: return .`setState`(
            `bytes`: try FfiConverterOptionSequenceUInt8.read(from: buf)
        )
        
        case 7: return .`setFact`(
            `bytes`: try FfiConverterSequenceUInt8.read(from: buf)
        )
        
        case 8: return .`setImage`(
            `bytes`: try FfiConverterSequenceUInt8.read(from: buf)
        )
        
        case 9: return .`currentTime`(
            `isoTime`: try FfiConverterString.read(from: buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    static func write(_ value: Msg, into buf: Writer) {
        switch value {
        
        
        case .`none`:
            buf.writeInt(Int32(1))
        
        
        case .`clear`:
            buf.writeInt(Int32(2))
        
        
        case .`get`:
            buf.writeInt(Int32(3))
        
        
        case .`fetch`:
            buf.writeInt(Int32(4))
        
        
        case .`restore`:
            buf.writeInt(Int32(5))
        
        
        case let .`setState`(`bytes`):
            buf.writeInt(Int32(6))
            FfiConverterOptionSequenceUInt8.write(`bytes`, into: buf)
            
        
        case let .`setFact`(`bytes`):
            buf.writeInt(Int32(7))
            FfiConverterSequenceUInt8.write(`bytes`, into: buf)
            
        
        case let .`setImage`(`bytes`):
            buf.writeInt(Int32(8))
            FfiConverterSequenceUInt8.write(`bytes`, into: buf)
            
        
        case let .`currentTime`(`isoTime`):
            buf.writeInt(Int32(9))
            FfiConverterString.write(`isoTime`, into: buf)
            
        }
    }
}


extension Msg: Equatable, Hashable {}


// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum Request {
    
    case `http`(`url`: String, `uuid`: [UInt8])
    case `time`(`uuid`: [UInt8])
    case `kvRead`(`uuid`: [UInt8], `key`: String)
    case `kvWrite`(`uuid`: [UInt8], `key`: String, `bytes`: [UInt8])
    case `render`
}

fileprivate struct FfiConverterTypeRequest: FfiConverterRustBuffer {
    typealias SwiftType = Request

    static func read(from buf: Reader) throws -> Request {
        let variant: Int32 = try buf.readInt()
        switch variant {
        
        case 1: return .`http`(
            `url`: try FfiConverterString.read(from: buf), 
            `uuid`: try FfiConverterSequenceUInt8.read(from: buf)
        )
        
        case 2: return .`time`(
            `uuid`: try FfiConverterSequenceUInt8.read(from: buf)
        )
        
        case 3: return .`kvRead`(
            `uuid`: try FfiConverterSequenceUInt8.read(from: buf), 
            `key`: try FfiConverterString.read(from: buf)
        )
        
        case 4: return .`kvWrite`(
            `uuid`: try FfiConverterSequenceUInt8.read(from: buf), 
            `key`: try FfiConverterString.read(from: buf), 
            `bytes`: try FfiConverterSequenceUInt8.read(from: buf)
        )
        
        case 5: return .`render`
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    static func write(_ value: Request, into buf: Writer) {
        switch value {
        
        
        case let .`http`(`url`,`uuid`):
            buf.writeInt(Int32(1))
            FfiConverterString.write(`url`, into: buf)
            FfiConverterSequenceUInt8.write(`uuid`, into: buf)
            
        
        case let .`time`(`uuid`):
            buf.writeInt(Int32(2))
            FfiConverterSequenceUInt8.write(`uuid`, into: buf)
            
        
        case let .`kvRead`(`uuid`,`key`):
            buf.writeInt(Int32(3))
            FfiConverterSequenceUInt8.write(`uuid`, into: buf)
            FfiConverterString.write(`key`, into: buf)
            
        
        case let .`kvWrite`(`uuid`,`key`,`bytes`):
            buf.writeInt(Int32(4))
            FfiConverterSequenceUInt8.write(`uuid`, into: buf)
            FfiConverterString.write(`key`, into: buf)
            FfiConverterSequenceUInt8.write(`bytes`, into: buf)
            
        
        case .`render`:
            buf.writeInt(Int32(5))
        
        }
    }
}


extension Request: Equatable, Hashable {}


// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum Response {
    
    case `http`(`uuid`: [UInt8], `bytes`: [UInt8])
    case `time`(`uuid`: [UInt8], `isoTime`: String)
    case `kvRead`(`uuid`: [UInt8], `bytes`: [UInt8]?)
    case `kvWrite`(`uuid`: [UInt8], `success`: Bool)
}

fileprivate struct FfiConverterTypeResponse: FfiConverterRustBuffer {
    typealias SwiftType = Response

    static func read(from buf: Reader) throws -> Response {
        let variant: Int32 = try buf.readInt()
        switch variant {
        
        case 1: return .`http`(
            `uuid`: try FfiConverterSequenceUInt8.read(from: buf), 
            `bytes`: try FfiConverterSequenceUInt8.read(from: buf)
        )
        
        case 2: return .`time`(
            `uuid`: try FfiConverterSequenceUInt8.read(from: buf), 
            `isoTime`: try FfiConverterString.read(from: buf)
        )
        
        case 3: return .`kvRead`(
            `uuid`: try FfiConverterSequenceUInt8.read(from: buf), 
            `bytes`: try FfiConverterOptionSequenceUInt8.read(from: buf)
        )
        
        case 4: return .`kvWrite`(
            `uuid`: try FfiConverterSequenceUInt8.read(from: buf), 
            `success`: try FfiConverterBool.read(from: buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    static func write(_ value: Response, into buf: Writer) {
        switch value {
        
        
        case let .`http`(`uuid`,`bytes`):
            buf.writeInt(Int32(1))
            FfiConverterSequenceUInt8.write(`uuid`, into: buf)
            FfiConverterSequenceUInt8.write(`bytes`, into: buf)
            
        
        case let .`time`(`uuid`,`isoTime`):
            buf.writeInt(Int32(2))
            FfiConverterSequenceUInt8.write(`uuid`, into: buf)
            FfiConverterString.write(`isoTime`, into: buf)
            
        
        case let .`kvRead`(`uuid`,`bytes`):
            buf.writeInt(Int32(3))
            FfiConverterSequenceUInt8.write(`uuid`, into: buf)
            FfiConverterOptionSequenceUInt8.write(`bytes`, into: buf)
            
        
        case let .`kvWrite`(`uuid`,`success`):
            buf.writeInt(Int32(4))
            FfiConverterSequenceUInt8.write(`uuid`, into: buf)
            FfiConverterBool.write(`success`, into: buf)
            
        }
    }
}


extension Response: Equatable, Hashable {}



public enum PlatformError {

    
    
    // Simple error enums only carry a message
    case InternalPlatformError(message: String)
    
}

fileprivate struct FfiConverterTypePlatformError: FfiConverterRustBuffer {
    typealias SwiftType = PlatformError

    static func read(from buf: Reader) throws -> PlatformError {
        let variant: Int32 = try buf.readInt()
        switch variant {

        

        
        case 1: return .InternalPlatformError(
            message: try FfiConverterString.read(from: buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    static func write(_ value: PlatformError, into buf: Writer) {
        switch value {

        

        
        case let .InternalPlatformError(message):
            buf.writeInt(Int32(1))
            FfiConverterString.write(message, into: buf)

        
        }
    }
}


extension PlatformError: Equatable, Hashable {}

extension PlatformError: Error { }

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate typealias Handle = UInt64
fileprivate class ConcurrentHandleMap<T> {
    private var leftMap: [Handle: T] = [:]
    private var counter: [Handle: UInt64] = [:]
    private var rightMap: [ObjectIdentifier: Handle] = [:]

    private let lock = NSLock()
    private var currentHandle: Handle = 0
    private let stride: Handle = 1

    func insert(obj: T) -> Handle {
        lock.withLock {
            let id = ObjectIdentifier(obj as AnyObject)
            let handle = rightMap[id] ?? {
                currentHandle += stride
                let handle = currentHandle
                leftMap[handle] = obj
                rightMap[id] = handle
                return handle
            }()
            counter[handle] = (counter[handle] ?? 0) + 1
            return handle
        }
    }

    func get(handle: Handle) -> T? {
        lock.withLock {
            leftMap[handle]
        }
    }

    func delete(handle: Handle) {
        remove(handle: handle)
    }

    @discardableResult
    func remove(handle: Handle) -> T? {
        lock.withLock {
            defer { counter[handle] = (counter[handle] ?? 1) - 1 }
            guard counter[handle] == 1 else { return leftMap[handle] }
            let obj = leftMap.removeValue(forKey: handle)
            if let obj = obj {
                rightMap.removeValue(forKey: ObjectIdentifier(obj as AnyObject))
            }
            return obj
        }
    }
}

// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
private let IDX_CALLBACK_FREE: Int32 = 0

// Declaration and FfiConverters for Platform Callback Interface

public protocol Platform : AnyObject {
    func `get`() throws -> String
    
}

// The ForeignCallback that is passed to Rust.
fileprivate let foreignCallbackCallbackInterfacePlatform : ForeignCallback =
    { (handle: Handle, method: Int32, args: RustBuffer, out_buf: UnsafeMutablePointer<RustBuffer>) -> Int32 in
        func `invokeGet`(_ swiftCallbackInterface: Platform, _ args: RustBuffer) throws -> RustBuffer {
        defer { args.deallocate() }
            let result = try swiftCallbackInterface.`get`()
            let writer = Writer()
                FfiConverterString.write(result, into: writer)
                return RustBuffer(bytes: writer.bytes)// TODO catch errors and report them back to Rust.
                // https://github.com/mozilla/uniffi-rs/issues/351

        }
        

        let cb: Platform
        do {
            cb = try FfiConverterCallbackInterfacePlatform.lift(handle)
        } catch {
            out_buf.pointee = FfiConverterString.lower("Platform: Invalid handle")
            return -1
        }

        switch method {
            case IDX_CALLBACK_FREE:
                FfiConverterCallbackInterfacePlatform.drop(handle: handle)
                // No return value.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                return 0
            case 1:
                do {
                    out_buf.pointee = try `invokeGet`(cb, args)
                    // Value written to out buffer.
                    // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                    return 1
                } catch let error as PlatformError {
                    out_buf.pointee = FfiConverterTypePlatformError.lower(error)
                    return -2
                } catch let error {
                    out_buf.pointee = FfiConverterString.lower(String(describing: error))
                    return -1
                }
            
            // This should never happen, because an out of bounds method index won't
            // ever be used. Once we can catch errors, we should return an InternalError.
            // https://github.com/mozilla/uniffi-rs/issues/351
            default:
                // An unexpected error happened.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                return -1
        }
    }

// FFIConverter protocol for callback interfaces
fileprivate struct FfiConverterCallbackInterfacePlatform {
    // Initialize our callback method with the scaffolding code
    private static var callbackInitialized = false
    private static func initCallback() {
        try! rustCall { (err: UnsafeMutablePointer<RustCallStatus>) in
                ffi_shared_18f3_Platform_init_callback(foreignCallbackCallbackInterfacePlatform, err)
        }
    }
    private static func ensureCallbackinitialized() {
        if !callbackInitialized {
            initCallback()
            callbackInitialized = true
        }
    }

    static func drop(handle: Handle) {
        handleMap.remove(handle: handle)
    }

    private static var handleMap = ConcurrentHandleMap<Platform>()
}

extension FfiConverterCallbackInterfacePlatform : FfiConverter {
    typealias SwiftType = Platform
    // We can use Handle as the FFIType because it's a typealias to UInt64
    typealias FfiType = Handle

    static func lift(_ handle: Handle) throws -> SwiftType {
        ensureCallbackinitialized();
        guard let callback = handleMap.get(handle: handle) else {
            throw UniffiInternalError.unexpectedStaleHandle
        }
        return callback
    }

    static func read(from buf: Reader) throws -> SwiftType {
        ensureCallbackinitialized();
        let handle: Handle = try buf.readInt()
        return try lift(handle)
    }

    static func lower(_ v: SwiftType) -> Handle {
        ensureCallbackinitialized();
        return handleMap.insert(obj: v)
    }

    static func write(_ v: SwiftType, into buf: Writer) {
        ensureCallbackinitialized();
        buf.writeInt(lower(v))
    }
}

fileprivate struct FfiConverterOptionTypeCatImage: FfiConverterRustBuffer {
    typealias SwiftType = CatImage?

    static func write(_ value: SwiftType, into buf: Writer) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        FfiConverterTypeCatImage.write(value, into: buf)
    }

    static func read(from buf: Reader) throws -> SwiftType {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeCatImage.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionSequenceUInt8: FfiConverterRustBuffer {
    typealias SwiftType = [UInt8]?

    static func write(_ value: SwiftType, into buf: Writer) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        FfiConverterSequenceUInt8.write(value, into: buf)
    }

    static func read(from buf: Reader) throws -> SwiftType {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceUInt8.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterSequenceUInt8: FfiConverterRustBuffer {
    typealias SwiftType = [UInt8]

    static func write(_ value: [UInt8], into buf: Writer) {
        let len = Int32(value.count)
        buf.writeInt(len)
        for item in value {
            FfiConverterUInt8.write(item, into: buf)
        }
    }

    static func read(from buf: Reader) throws -> [UInt8] {
        let len: Int32 = try buf.readInt()
        var seq = [UInt8]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterUInt8.read(from: buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeRequest: FfiConverterRustBuffer {
    typealias SwiftType = [Request]

    static func write(_ value: [Request], into buf: Writer) {
        let len = Int32(value.count)
        buf.writeInt(len)
        for item in value {
            FfiConverterTypeRequest.write(item, into: buf)
        }
    }

    static func read(from buf: Reader) throws -> [Request] {
        let len: Int32 = try buf.readInt()
        var seq = [Request]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeRequest.read(from: buf))
        }
        return seq
    }
}

public func `addForPlatform`(_ `left`: UInt32, _ `right`: UInt32, _ `platform`: Platform) throws -> String {
    return try FfiConverterString.lift(
        try
    
    rustCallWithError(FfiConverterTypePlatformError.self) {
    
    shared_18f3_add_for_platform(
        FfiConverterUInt32.lower(`left`), 
        FfiConverterUInt32.lower(`right`), 
        FfiConverterCallbackInterfacePlatform.lower(`platform`), $0)
}
    )
}



/**
 * Top level initializers and tear down methods.
 *
 * This is generated by uniffi.
 */
public enum SharedLifecycle {
    /**
     * Initialize the FFI and Rust library. This should be only called once per application.
     */
    func initialize() {
    }
}
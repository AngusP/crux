// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(sharedFFI)
import sharedFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_shared_1406_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_shared_1406_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a libray of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// A helper class to read values out of a byte buffer.
fileprivate class Reader {
    let data: Data
    var offset: Data.Index

    init(data: Data) {
        self.data = data
        self.offset = 0
    }

    // Reads an integer at the current offset, in big-endian order, and advances
    // the offset on success. Throws if reading the integer would move the
    // offset past the end of the buffer.
    func readInt<T: FixedWidthInteger>() throws -> T {
        let range = offset..<offset + MemoryLayout<T>.size
        guard data.count >= range.upperBound else {
            throw UniffiInternalError.bufferOverflow
        }
        if T.self == UInt8.self {
            let value = data[offset]
            offset += 1
            return value as! T
        }
        var value: T = 0
        let _ = withUnsafeMutableBytes(of: &value, { data.copyBytes(to: $0, from: range)})
        offset = range.upperBound
        return value.bigEndian
    }

    // Reads an arbitrary number of bytes, to be used to read
    // raw bytes, this is useful when lifting strings
    func readBytes(count: Int) throws -> Array<UInt8> {
        let range = offset..<(offset+count)
        guard data.count >= range.upperBound else {
            throw UniffiInternalError.bufferOverflow
        }
        var value = [UInt8](repeating: 0, count: count)
        value.withUnsafeMutableBufferPointer({ buffer in
            data.copyBytes(to: buffer, from: range)
        })
        offset = range.upperBound
        return value
    }

    // Reads a float at the current offset.
    @inlinable
    func readFloat() throws -> Float {
        return Float(bitPattern: try readInt())
    }

    // Reads a float at the current offset.
    @inlinable
    func readDouble() throws -> Double {
        return Double(bitPattern: try readInt())
    }

    // Indicates if the offset has reached the end of the buffer.
    @inlinable
    func hasRemaining() -> Bool {
        return offset < data.count
    }
}

// A helper class to write values into a byte buffer.
fileprivate class Writer {
    var bytes: [UInt8]
    var offset: Array<UInt8>.Index

    init() {
        self.bytes = []
        self.offset = 0
    }

    func writeBytes<S>(_ byteArr: S) where S: Sequence, S.Element == UInt8 {
        bytes.append(contentsOf: byteArr)
    }

    // Writes an integer in big-endian order.
    //
    // Warning: make sure what you are trying to write
    // is in the correct type!
    func writeInt<T: FixedWidthInteger>(_ value: T) {
        var value = value.bigEndian
        withUnsafeBytes(of: &value) { bytes.append(contentsOf: $0) }
    }

    @inlinable
    func writeFloat(_ value: Float) {
        writeInt(value.bitPattern)
    }

    @inlinable
    func writeDouble(_ value: Double) {
        writeInt(value.bitPattern)
    }
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: Reader) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: Writer)
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
    static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    static func lift(_ buf: RustBuffer) throws -> SwiftType {
        let reader = Reader(data: Data(rustBuffer: buf))
        let value = try read(from: reader)
        if reader.hasRemaining() {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    static func lower(_ value: SwiftType) -> RustBuffer {
          let writer = Writer()
          write(value, into: writer)
          return RustBuffer(bytes: writer.bytes)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_PANIC: Int8 = 2

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: {
        $0.deallocate()
        return UniffiInternalError.unexpectedRustCallError
    })
}

private func rustCallWithError<T, F: FfiConverter>
    (_ errorFfiConverter: F.Type, _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T
    where F.SwiftType: Error, F.FfiType == RustBuffer
    {
    try makeRustCall(callback, errorHandler: { return try errorFfiConverter.lift($0) })
}

private func makeRustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T, errorHandler: (RustBuffer) throws -> Error) throws -> T {
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    switch callStatus.code {
        case CALL_SUCCESS:
            return returnedVal

        case CALL_ERROR:
            throw try errorHandler(callStatus.errorBuf)

        case CALL_PANIC:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

// Public interface members begin here.


fileprivate struct FfiConverterUInt8: FfiConverterPrimitive {
    typealias FfiType = UInt8
    typealias SwiftType = UInt8

    static func read(from buf: Reader) throws -> UInt8 {
        return try lift(buf.readInt())
    }

    static func write(_ value: UInt8, into buf: Writer) {
        buf.writeInt(lower(value))
    }
}

fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    static func read(from buf: Reader) throws -> Bool {
        return try lift(buf.readInt())
    }

    static func write(_ value: Bool, into buf: Writer) {
        buf.writeInt(lower(value))
    }
}

fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    static func read(from buf: Reader) throws -> String {
        let len: Int32 = try buf.readInt()
        return String(bytes: try buf.readBytes(count: Int(len)), encoding: String.Encoding.utf8)!
    }

    static func write(_ value: String, into buf: Writer) {
        let len = Int32(value.utf8.count)
        buf.writeInt(len)
        buf.writeBytes(value.utf8)
    }
}


public protocol CoreProtocol {
    func `message`(_ `msg`: Msg)  -> [Request]
    func `response`(_ `res`: Response)  -> [Request]
    func `view`()  -> ViewModel
    
}

public class Core: CoreProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }
    public convenience init()  {
        self.init(unsafeFromRawPointer: try!
    
    rustCall() {
    
    shared_1406_Core_new($0)
})
    }

    deinit {
        try! rustCall { ffi_shared_1406_Core_object_free(pointer, $0) }
    }

    

    
    public func `message`(_ `msg`: Msg)  -> [Request] {
        return try! FfiConverterSequenceTypeRequest.lift(
            try!
    rustCall() {
    
    shared_1406_Core_message(self.pointer, 
        FfiConverterTypeMsg.lower(`msg`), $0
    )
}
        )
    }
    public func `response`(_ `res`: Response)  -> [Request] {
        return try! FfiConverterSequenceTypeRequest.lift(
            try!
    rustCall() {
    
    shared_1406_Core_response(self.pointer, 
        FfiConverterTypeResponse.lower(`res`), $0
    )
}
        )
    }
    public func `view`()  -> ViewModel {
        return try! FfiConverterTypeViewModel.lift(
            try!
    rustCall() {
    
    shared_1406_Core_view(self.pointer, $0
    )
}
        )
    }
    
}


fileprivate struct FfiConverterTypeCore: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Core

    static func read(from buf: Reader) throws -> Core {
        let v: UInt64 = try buf.readInt()
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    static func write(_ value: Core, into buf: Writer) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        buf.writeInt(UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Core {
        return Core(unsafeFromRawPointer: pointer)
    }

    static func lower(_ value: Core) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}


public struct BoolEnvelope {
    public var `body`: Bool
    public var `uuid`: [UInt8]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`body`: Bool, `uuid`: [UInt8]) {
        self.`body` = `body`
        self.`uuid` = `uuid`
    }
}


extension BoolEnvelope: Equatable, Hashable {
    public static func ==(lhs: BoolEnvelope, rhs: BoolEnvelope) -> Bool {
        if lhs.`body` != rhs.`body` {
            return false
        }
        if lhs.`uuid` != rhs.`uuid` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`body`)
        hasher.combine(`uuid`)
    }
}


fileprivate struct FfiConverterTypeBoolEnvelope: FfiConverterRustBuffer {
    fileprivate static func read(from buf: Reader) throws -> BoolEnvelope {
        return try BoolEnvelope(
            `body`: FfiConverterBool.read(from: buf), 
            `uuid`: FfiConverterSequenceUInt8.read(from: buf)
        )
    }

    fileprivate static func write(_ value: BoolEnvelope, into buf: Writer) {
        FfiConverterBool.write(value.`body`, into: buf)
        FfiConverterSequenceUInt8.write(value.`uuid`, into: buf)
    }
}


public struct BytesEnvelope {
    public var `body`: [UInt8]
    public var `uuid`: [UInt8]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`body`: [UInt8], `uuid`: [UInt8]) {
        self.`body` = `body`
        self.`uuid` = `uuid`
    }
}


extension BytesEnvelope: Equatable, Hashable {
    public static func ==(lhs: BytesEnvelope, rhs: BytesEnvelope) -> Bool {
        if lhs.`body` != rhs.`body` {
            return false
        }
        if lhs.`uuid` != rhs.`uuid` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`body`)
        hasher.combine(`uuid`)
    }
}


fileprivate struct FfiConverterTypeBytesEnvelope: FfiConverterRustBuffer {
    fileprivate static func read(from buf: Reader) throws -> BytesEnvelope {
        return try BytesEnvelope(
            `body`: FfiConverterSequenceUInt8.read(from: buf), 
            `uuid`: FfiConverterSequenceUInt8.read(from: buf)
        )
    }

    fileprivate static func write(_ value: BytesEnvelope, into buf: Writer) {
        FfiConverterSequenceUInt8.write(value.`body`, into: buf)
        FfiConverterSequenceUInt8.write(value.`uuid`, into: buf)
    }
}


public struct CatImage {
    public var `file`: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`file`: String) {
        self.`file` = `file`
    }
}


extension CatImage: Equatable, Hashable {
    public static func ==(lhs: CatImage, rhs: CatImage) -> Bool {
        if lhs.`file` != rhs.`file` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`file`)
    }
}


fileprivate struct FfiConverterTypeCatImage: FfiConverterRustBuffer {
    fileprivate static func read(from buf: Reader) throws -> CatImage {
        return try CatImage(
            `file`: FfiConverterString.read(from: buf)
        )
    }

    fileprivate static func write(_ value: CatImage, into buf: Writer) {
        FfiConverterString.write(value.`file`, into: buf)
    }
}


public struct KeyValue {
    public var `key`: String
    public var `value`: [UInt8]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`key`: String, `value`: [UInt8]) {
        self.`key` = `key`
        self.`value` = `value`
    }
}


extension KeyValue: Equatable, Hashable {
    public static func ==(lhs: KeyValue, rhs: KeyValue) -> Bool {
        if lhs.`key` != rhs.`key` {
            return false
        }
        if lhs.`value` != rhs.`value` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`key`)
        hasher.combine(`value`)
    }
}


fileprivate struct FfiConverterTypeKeyValue: FfiConverterRustBuffer {
    fileprivate static func read(from buf: Reader) throws -> KeyValue {
        return try KeyValue(
            `key`: FfiConverterString.read(from: buf), 
            `value`: FfiConverterSequenceUInt8.read(from: buf)
        )
    }

    fileprivate static func write(_ value: KeyValue, into buf: Writer) {
        FfiConverterString.write(value.`key`, into: buf)
        FfiConverterSequenceUInt8.write(value.`value`, into: buf)
    }
}


public struct KeyValueEnvelope {
    public var `body`: KeyValue
    public var `uuid`: [UInt8]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`body`: KeyValue, `uuid`: [UInt8]) {
        self.`body` = `body`
        self.`uuid` = `uuid`
    }
}


extension KeyValueEnvelope: Equatable, Hashable {
    public static func ==(lhs: KeyValueEnvelope, rhs: KeyValueEnvelope) -> Bool {
        if lhs.`body` != rhs.`body` {
            return false
        }
        if lhs.`uuid` != rhs.`uuid` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`body`)
        hasher.combine(`uuid`)
    }
}


fileprivate struct FfiConverterTypeKeyValueEnvelope: FfiConverterRustBuffer {
    fileprivate static func read(from buf: Reader) throws -> KeyValueEnvelope {
        return try KeyValueEnvelope(
            `body`: FfiConverterTypeKeyValue.read(from: buf), 
            `uuid`: FfiConverterSequenceUInt8.read(from: buf)
        )
    }

    fileprivate static func write(_ value: KeyValueEnvelope, into buf: Writer) {
        FfiConverterTypeKeyValue.write(value.`body`, into: buf)
        FfiConverterSequenceUInt8.write(value.`uuid`, into: buf)
    }
}


public struct OptionalBoolEnvelope {
    public var `body`: Bool?
    public var `uuid`: [UInt8]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`body`: Bool?, `uuid`: [UInt8]) {
        self.`body` = `body`
        self.`uuid` = `uuid`
    }
}


extension OptionalBoolEnvelope: Equatable, Hashable {
    public static func ==(lhs: OptionalBoolEnvelope, rhs: OptionalBoolEnvelope) -> Bool {
        if lhs.`body` != rhs.`body` {
            return false
        }
        if lhs.`uuid` != rhs.`uuid` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`body`)
        hasher.combine(`uuid`)
    }
}


fileprivate struct FfiConverterTypeOptionalBoolEnvelope: FfiConverterRustBuffer {
    fileprivate static func read(from buf: Reader) throws -> OptionalBoolEnvelope {
        return try OptionalBoolEnvelope(
            `body`: FfiConverterOptionBool.read(from: buf), 
            `uuid`: FfiConverterSequenceUInt8.read(from: buf)
        )
    }

    fileprivate static func write(_ value: OptionalBoolEnvelope, into buf: Writer) {
        FfiConverterOptionBool.write(value.`body`, into: buf)
        FfiConverterSequenceUInt8.write(value.`uuid`, into: buf)
    }
}


public struct OptionalBytesEnvelope {
    public var `body`: [UInt8]?
    public var `uuid`: [UInt8]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`body`: [UInt8]?, `uuid`: [UInt8]) {
        self.`body` = `body`
        self.`uuid` = `uuid`
    }
}


extension OptionalBytesEnvelope: Equatable, Hashable {
    public static func ==(lhs: OptionalBytesEnvelope, rhs: OptionalBytesEnvelope) -> Bool {
        if lhs.`body` != rhs.`body` {
            return false
        }
        if lhs.`uuid` != rhs.`uuid` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`body`)
        hasher.combine(`uuid`)
    }
}


fileprivate struct FfiConverterTypeOptionalBytesEnvelope: FfiConverterRustBuffer {
    fileprivate static func read(from buf: Reader) throws -> OptionalBytesEnvelope {
        return try OptionalBytesEnvelope(
            `body`: FfiConverterOptionSequenceUInt8.read(from: buf), 
            `uuid`: FfiConverterSequenceUInt8.read(from: buf)
        )
    }

    fileprivate static func write(_ value: OptionalBytesEnvelope, into buf: Writer) {
        FfiConverterOptionSequenceUInt8.write(value.`body`, into: buf)
        FfiConverterSequenceUInt8.write(value.`uuid`, into: buf)
    }
}


public struct StringEnvelope {
    public var `body`: String
    public var `uuid`: [UInt8]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`body`: String, `uuid`: [UInt8]) {
        self.`body` = `body`
        self.`uuid` = `uuid`
    }
}


extension StringEnvelope: Equatable, Hashable {
    public static func ==(lhs: StringEnvelope, rhs: StringEnvelope) -> Bool {
        if lhs.`body` != rhs.`body` {
            return false
        }
        if lhs.`uuid` != rhs.`uuid` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`body`)
        hasher.combine(`uuid`)
    }
}


fileprivate struct FfiConverterTypeStringEnvelope: FfiConverterRustBuffer {
    fileprivate static func read(from buf: Reader) throws -> StringEnvelope {
        return try StringEnvelope(
            `body`: FfiConverterString.read(from: buf), 
            `uuid`: FfiConverterSequenceUInt8.read(from: buf)
        )
    }

    fileprivate static func write(_ value: StringEnvelope, into buf: Writer) {
        FfiConverterString.write(value.`body`, into: buf)
        FfiConverterSequenceUInt8.write(value.`uuid`, into: buf)
    }
}


public struct ViewModel {
    public var `fact`: String
    public var `image`: CatImage?
    public var `platform`: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`fact`: String, `image`: CatImage?, `platform`: String) {
        self.`fact` = `fact`
        self.`image` = `image`
        self.`platform` = `platform`
    }
}


extension ViewModel: Equatable, Hashable {
    public static func ==(lhs: ViewModel, rhs: ViewModel) -> Bool {
        if lhs.`fact` != rhs.`fact` {
            return false
        }
        if lhs.`image` != rhs.`image` {
            return false
        }
        if lhs.`platform` != rhs.`platform` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`fact`)
        hasher.combine(`image`)
        hasher.combine(`platform`)
    }
}


fileprivate struct FfiConverterTypeViewModel: FfiConverterRustBuffer {
    fileprivate static func read(from buf: Reader) throws -> ViewModel {
        return try ViewModel(
            `fact`: FfiConverterString.read(from: buf), 
            `image`: FfiConverterOptionTypeCatImage.read(from: buf), 
            `platform`: FfiConverterString.read(from: buf)
        )
    }

    fileprivate static func write(_ value: ViewModel, into buf: Writer) {
        FfiConverterString.write(value.`fact`, into: buf)
        FfiConverterOptionTypeCatImage.write(value.`image`, into: buf)
        FfiConverterString.write(value.`platform`, into: buf)
    }
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum Msg {
    
    case `none`
    case `getPlatform`
    case `setPlatform`(`platform`: String)
    case `clear`
    case `get`
    case `fetch`
    case `restore`
    case `setState`(`bytes`: [UInt8]?)
    case `setFact`(`bytes`: [UInt8])
    case `setImage`(`bytes`: [UInt8])
    case `currentTime`(`isoTime`: String)
}

fileprivate struct FfiConverterTypeMsg: FfiConverterRustBuffer {
    typealias SwiftType = Msg

    static func read(from buf: Reader) throws -> Msg {
        let variant: Int32 = try buf.readInt()
        switch variant {
        
        case 1: return .`none`
        
        case 2: return .`getPlatform`
        
        case 3: return .`setPlatform`(
            `platform`: try FfiConverterString.read(from: buf)
        )
        
        case 4: return .`clear`
        
        case 5: return .`get`
        
        case 6: return .`fetch`
        
        case 7: return .`restore`
        
        case 8: return .`setState`(
            `bytes`: try FfiConverterOptionSequenceUInt8.read(from: buf)
        )
        
        case 9: return .`setFact`(
            `bytes`: try FfiConverterSequenceUInt8.read(from: buf)
        )
        
        case 10: return .`setImage`(
            `bytes`: try FfiConverterSequenceUInt8.read(from: buf)
        )
        
        case 11: return .`currentTime`(
            `isoTime`: try FfiConverterString.read(from: buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    static func write(_ value: Msg, into buf: Writer) {
        switch value {
        
        
        case .`none`:
            buf.writeInt(Int32(1))
        
        
        case .`getPlatform`:
            buf.writeInt(Int32(2))
        
        
        case let .`setPlatform`(`platform`):
            buf.writeInt(Int32(3))
            FfiConverterString.write(`platform`, into: buf)
            
        
        case .`clear`:
            buf.writeInt(Int32(4))
        
        
        case .`get`:
            buf.writeInt(Int32(5))
        
        
        case .`fetch`:
            buf.writeInt(Int32(6))
        
        
        case .`restore`:
            buf.writeInt(Int32(7))
        
        
        case let .`setState`(`bytes`):
            buf.writeInt(Int32(8))
            FfiConverterOptionSequenceUInt8.write(`bytes`, into: buf)
            
        
        case let .`setFact`(`bytes`):
            buf.writeInt(Int32(9))
            FfiConverterSequenceUInt8.write(`bytes`, into: buf)
            
        
        case let .`setImage`(`bytes`):
            buf.writeInt(Int32(10))
            FfiConverterSequenceUInt8.write(`bytes`, into: buf)
            
        
        case let .`currentTime`(`isoTime`):
            buf.writeInt(Int32(11))
            FfiConverterString.write(`isoTime`, into: buf)
            
        }
    }
}


extension Msg: Equatable, Hashable {}


// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum Request {
    
    case `http`(`data`: StringEnvelope)
    case `time`(`data`: OptionalBoolEnvelope)
    case `platform`(`data`: OptionalBoolEnvelope)
    case `kvRead`(`data`: StringEnvelope)
    case `kvWrite`(`data`: KeyValueEnvelope)
    case `render`
}

fileprivate struct FfiConverterTypeRequest: FfiConverterRustBuffer {
    typealias SwiftType = Request

    static func read(from buf: Reader) throws -> Request {
        let variant: Int32 = try buf.readInt()
        switch variant {
        
        case 1: return .`http`(
            `data`: try FfiConverterTypeStringEnvelope.read(from: buf)
        )
        
        case 2: return .`time`(
            `data`: try FfiConverterTypeOptionalBoolEnvelope.read(from: buf)
        )
        
        case 3: return .`platform`(
            `data`: try FfiConverterTypeOptionalBoolEnvelope.read(from: buf)
        )
        
        case 4: return .`kvRead`(
            `data`: try FfiConverterTypeStringEnvelope.read(from: buf)
        )
        
        case 5: return .`kvWrite`(
            `data`: try FfiConverterTypeKeyValueEnvelope.read(from: buf)
        )
        
        case 6: return .`render`
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    static func write(_ value: Request, into buf: Writer) {
        switch value {
        
        
        case let .`http`(`data`):
            buf.writeInt(Int32(1))
            FfiConverterTypeStringEnvelope.write(`data`, into: buf)
            
        
        case let .`time`(`data`):
            buf.writeInt(Int32(2))
            FfiConverterTypeOptionalBoolEnvelope.write(`data`, into: buf)
            
        
        case let .`platform`(`data`):
            buf.writeInt(Int32(3))
            FfiConverterTypeOptionalBoolEnvelope.write(`data`, into: buf)
            
        
        case let .`kvRead`(`data`):
            buf.writeInt(Int32(4))
            FfiConverterTypeStringEnvelope.write(`data`, into: buf)
            
        
        case let .`kvWrite`(`data`):
            buf.writeInt(Int32(5))
            FfiConverterTypeKeyValueEnvelope.write(`data`, into: buf)
            
        
        case .`render`:
            buf.writeInt(Int32(6))
        
        }
    }
}


extension Request: Equatable, Hashable {}


// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum Response {
    
    case `http`(`data`: BytesEnvelope)
    case `time`(`data`: StringEnvelope)
    case `platform`(`data`: StringEnvelope)
    case `kvRead`(`data`: OptionalBytesEnvelope)
    case `kvWrite`(`data`: BoolEnvelope)
}

fileprivate struct FfiConverterTypeResponse: FfiConverterRustBuffer {
    typealias SwiftType = Response

    static func read(from buf: Reader) throws -> Response {
        let variant: Int32 = try buf.readInt()
        switch variant {
        
        case 1: return .`http`(
            `data`: try FfiConverterTypeBytesEnvelope.read(from: buf)
        )
        
        case 2: return .`time`(
            `data`: try FfiConverterTypeStringEnvelope.read(from: buf)
        )
        
        case 3: return .`platform`(
            `data`: try FfiConverterTypeStringEnvelope.read(from: buf)
        )
        
        case 4: return .`kvRead`(
            `data`: try FfiConverterTypeOptionalBytesEnvelope.read(from: buf)
        )
        
        case 5: return .`kvWrite`(
            `data`: try FfiConverterTypeBoolEnvelope.read(from: buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    static func write(_ value: Response, into buf: Writer) {
        switch value {
        
        
        case let .`http`(`data`):
            buf.writeInt(Int32(1))
            FfiConverterTypeBytesEnvelope.write(`data`, into: buf)
            
        
        case let .`time`(`data`):
            buf.writeInt(Int32(2))
            FfiConverterTypeStringEnvelope.write(`data`, into: buf)
            
        
        case let .`platform`(`data`):
            buf.writeInt(Int32(3))
            FfiConverterTypeStringEnvelope.write(`data`, into: buf)
            
        
        case let .`kvRead`(`data`):
            buf.writeInt(Int32(4))
            FfiConverterTypeOptionalBytesEnvelope.write(`data`, into: buf)
            
        
        case let .`kvWrite`(`data`):
            buf.writeInt(Int32(5))
            FfiConverterTypeBoolEnvelope.write(`data`, into: buf)
            
        }
    }
}


extension Response: Equatable, Hashable {}


fileprivate struct FfiConverterOptionBool: FfiConverterRustBuffer {
    typealias SwiftType = Bool?

    static func write(_ value: SwiftType, into buf: Writer) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        FfiConverterBool.write(value, into: buf)
    }

    static func read(from buf: Reader) throws -> SwiftType {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try FfiConverterBool.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeCatImage: FfiConverterRustBuffer {
    typealias SwiftType = CatImage?

    static func write(_ value: SwiftType, into buf: Writer) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        FfiConverterTypeCatImage.write(value, into: buf)
    }

    static func read(from buf: Reader) throws -> SwiftType {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeCatImage.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionSequenceUInt8: FfiConverterRustBuffer {
    typealias SwiftType = [UInt8]?

    static func write(_ value: SwiftType, into buf: Writer) {
        guard let value = value else {
            buf.writeInt(Int8(0))
            return
        }
        buf.writeInt(Int8(1))
        FfiConverterSequenceUInt8.write(value, into: buf)
    }

    static func read(from buf: Reader) throws -> SwiftType {
        switch try buf.readInt() as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceUInt8.read(from: buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterSequenceUInt8: FfiConverterRustBuffer {
    typealias SwiftType = [UInt8]

    static func write(_ value: [UInt8], into buf: Writer) {
        let len = Int32(value.count)
        buf.writeInt(len)
        for item in value {
            FfiConverterUInt8.write(item, into: buf)
        }
    }

    static func read(from buf: Reader) throws -> [UInt8] {
        let len: Int32 = try buf.readInt()
        var seq = [UInt8]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterUInt8.read(from: buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeRequest: FfiConverterRustBuffer {
    typealias SwiftType = [Request]

    static func write(_ value: [Request], into buf: Writer) {
        let len = Int32(value.count)
        buf.writeInt(len)
        for item in value {
            FfiConverterTypeRequest.write(item, into: buf)
        }
    }

    static func read(from buf: Reader) throws -> [Request] {
        let len: Int32 = try buf.readInt()
        var seq = [Request]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeRequest.read(from: buf))
        }
        return seq
    }
}

/**
 * Top level initializers and tear down methods.
 *
 * This is generated by uniffi.
 */
public enum SharedLifecycle {
    /**
     * Initialize the FFI and Rust library. This should be only called once per application.
     */
    func initialize() {
    }
}
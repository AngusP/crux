namespace shared {
  [Throws=PlatformError]
  string add_for_platform(u32 left, u32 right, Platform platform);
};

[Error]
enum PlatformError {
  "InternalPlatformError",
};

callback interface Platform {
  [Throws=PlatformError]
  string get();
};

interface Core {
  Request message(Msg msg);
  Request response(Response res);
  ViewModel view();
};

[Enum]
interface Msg {
  Clear();
  Get();
  Fetch();
  SetFact(sequence<u8> bytes);
  SetImage(sequence<u8> bytes);
  CurrentTime(string iso_time);
};

[Enum]
interface Request {
  Http(string url, sequence<u8> uuid);
  Time(sequence<u8> uuid);
  Render();
};

[Enum]
interface Response {
  Http(sequence<u8> uuid, sequence<u8> bytes);
  Time(sequence<u8> uuid, string iso_time);
};

dictionary ViewModel {
  string fact;
};

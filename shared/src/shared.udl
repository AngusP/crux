namespace shared {
  [Throws=PlatformError]
  string add_for_platform(u32 left, u32 right, Platform platform);
};

callback interface Message {
  Msg set_fact(sequence<u8> bytes);
  Msg set_image(sequence<u8> bytes);
};

[Enum]
interface Msg {
  Clear();
  Get();
  Fetch();
  SetFact(sequence<u8> bytes);
  SetImage(sequence<u8> bytes);
  CurrentTime(string iso_time);
};

[Enum]
interface Cmd {
  HttpGet(string url, Message msg);
  TimeGet();
  Render();
};

dictionary ViewModel {
  string fact;
};

interface Core {
  constructor();
  Cmd update(Msg msg);
  ViewModel view();
};

[Error]
enum PlatformError {
  "InternalPlatformError",
};

callback interface Platform {
  [Throws=PlatformError]
  string get();
};

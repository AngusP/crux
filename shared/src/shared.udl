namespace shared {
};

interface Core {
  constructor();
  sequence<Request> message(Msg msg);
  sequence<Request> response(Response res);
  ViewModel view();
};

[Enum]
interface Msg {
  None();
  GetPlatform();
  SetPlatform(string platform);
  Clear();
  Get();
  Fetch();
  Restore();
  SetState(sequence<u8>? bytes);
  SetFact(sequence<u8> bytes);
  SetImage(sequence<u8> bytes);
  CurrentTime(string iso_time);
};

[Enum]
interface Request {
  Http(string url, sequence<u8> uuid);
  Time(sequence<u8> uuid);
  Platform(sequence<u8> uuid);
  KVRead(sequence<u8> uuid, string key);
  KVWrite(sequence<u8> uuid, string key, sequence<u8> bytes);
  Render();
};

[Enum]
interface Response {
  Http(sequence<u8> uuid, sequence<u8> bytes);
  Time(sequence<u8> uuid, string iso_time);
  Platform(sequence<u8> uuid, string platform);
  KVRead(sequence<u8> uuid, sequence<u8>? bytes);
  KVWrite(sequence<u8> uuid, boolean success);
};

dictionary CatImage {
  string file;
};

dictionary ViewModel {
  string fact;
  CatImage? image;
  string platform;
};
